{"version":3,"sources":["indexedDB/db.js","components/Forms/Form.js","components/Items/Itams.js","App.js","reportWebVitals.js","index.js"],"names":["db","getAllNote","Promise","res","rej","transaction","objectStore","getAll","onsuccess","e","collection","target","result","console","log","removeItem","indexName","dataset","name","store","request","index","getKey","delete","putImg","inpImg","document","getElementById","put","files","get","imgFile","imgUrl","window","URL","webkitURL","createObjectURL","setAttribute","Form","useState","setName","email","setEmail","password","setPassword","object","pass","className","id","src","alt","onChange","type","multiple","placeholder","value","onClick","preventDefault","obj","tx","add","oncomplete","onerror","event","alert","errorCode","addNote","str","base64","btoa","decoder","atob","Items","heroes","setHeroes","useEffect","then","data","slice","length","map","el","data-name","App","openDb","setOpenDb","dbReq","indexedDB","open","onupgradeneeded","objectStoreNames","contains","createObjectStore","autoIncrement","createIndex","unique","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.423108d7.chunk.js","sourcesContent":["let db;\n\nexport function createDB() {\n    return new Promise((res, rej) => {\n        let dbReq = indexedDB.open('myDB', 1);\n        dbReq.onupgradeneeded = (event) => {\n            db = event.target.result;\n\n            if (!db.objectStoreNames.contains(\"heroes\")) {\n                let objectStore = db.createObjectStore(\"heroes\", {autoIncrement: true})\n                // указываем через какой индекс будет указан путь к ключу\n                objectStore.createIndex(\"name\", \"name\", {unique: false});\n                objectStore.createIndex(\"email\", \"email\", {unique: true});\n            }\n        }\n        dbReq.onsuccess = (event) => {\n            db = event.target.result;\n            res(db)\n        }\n        dbReq.onerror = (event) => {\n            alert('error opening database ' + event.target.errorCode);\n        }\n    })\n}\n\n// createDB()\n\nexport const addNote = (obj) => {\n    let tx = db.transaction(['heroes'], 'readwrite');\n    let store = tx.objectStore('heroes');\n    store.add(obj);\n    tx.oncomplete = () => {\n        console.log('heroes has been added...!')\n    }\n    tx.onerror = (event) => {\n        alert('already exist ' + event.target.errorCode);\n    }\n}\n\nexport const getAllNote = () => {\n    return new Promise((res, rej)=>{\n        let tx = db.transaction(['heroes'], 'readonly');\n        let store = tx.objectStore('heroes')\n        let req = store.getAll()\n        req.onsuccess = (e) => {\n            let collection = e.target.result\n            if (collection) {\n                res(collection)\n                // console.log(collection);\n            } else {\n                console.log(\"note 1 not found\")\n            }\n        }\n    })\n\n}\n\n// получаем объект по индексу\nexport const getNote = () => {\n    let tx = db.transaction(['heroes'], 'readonly');\n    let store = tx.objectStore('heroes')\n    let req = store.get(1)\n    req.onsuccess = (e) => {\n        let note = e.target.result\n        if (note) {\n            console.log(note);\n        } else {\n            console.log(\"note 1 not found\")\n        }\n    }\n}\n\n// получаем объект по пути к индексу (name или тот который указан при создании базы)\nexport const getNoteByKey = (keyPath) => {\n    let tx = db.transaction(['heroes'], 'readonly')\n    let store = tx.objectStore('heroes')\n\n    // указываем путь к ключу для определения индекса\n    let index = store.index('name')\n    let request = index.getKey(keyPath)\n\n    request.onsuccess = () => {\n        let result = request.result\n        console.log(result)\n    }\n    request.onerror = () => {\n        console.log(\"error.....\")\n    }\n}\n\nexport const getNotesByCursors = () => {\n    let tx = db.transaction(['heroes'], 'readonly')\n    let store = tx.objectStore('heroes')\n\n    // Создать запрос курсора\n    let request = store.openCursor()\n    // // если бы мы хотели только заметки за прошедший час,\n    // let anHourAgoInMilliseconds = Date.now() - 60 * 60 * 1000;\n    // // IDBKeyRange - глобальная переменная для определения диапазонов для запроса\n    // let keyRange = IDBKeyRange.lowerBound(anHourAgoInMilliseconds);\n    // let req = index.openCursor(keyRange, 'next');\n\n\n    let allHeroes = []\n    let allTheSameName = []\n\n    request.onsuccess = (e) => {\n        let cursor = e.target.result\n        // если объекты(курсоры) существуют - делаем smt и продолжаем перебирать\n        if (cursor != null) {\n            allHeroes.push(cursor.value)\n            if (cursor.value.name === \"Denys\") {\n                allTheSameName.push(cursor.value)\n            }\n            cursor.continue()\n        } else {\n            console.log(\"================= cursors was ended =================\")\n            // console.log(\"=================\")\n        }\n        console.log(\"all items: \", allHeroes)\n        console.log(\"special cursors: \", allTheSameName)\n    }\n    request.onerror = (e) => {\n        console.log(\"error..... \")\n    }\n}\n\nexport const removeItem = (e) => {\n    const indexName = e.target.dataset.name\n\n    let tx = db.transaction(['heroes'], 'readwrite')\n    let store = tx.objectStore('heroes')\n\n    let index = store.index(\"name\")\n    let request = index.getKey(indexName);\n    request.onsuccess = (e) => {\n        let result = request.result\n        let deleteRequest = store.delete(result)\n        deleteRequest.onsuccess = () => {\n            console.log(\"item has been deleted\")\n        }\n    }\n\n\n}\n\nexport const removeAllCollection = () => {\n    let transaction = db.transaction([\"images\"], \"readwrite\")\n    let store = transaction.objectStore(\"images\");\n    store.clear()\n}\n\nexport const putImg = () => {\n    let tx = db.transaction(['heroes'], 'readwrite')\n    let store = tx.objectStore('heroes')\n    let inpImg = document.getElementById(\"fileImg\")\n    store.put(inpImg.files[0], 'img')\n\n    store.get(\"img\").onsuccess = (e) => {\n        let imgFile = e.target.result;\n        let URL = window.URL || window.webkitURL;\n        let imgUrl = URL.createObjectURL(imgFile);\n        document.getElementById(\"temp_img\").setAttribute(\"src\", imgUrl);\n    }\n}\n\n    // function toDataURL(url, callback) {\n    //     var xhr = new XMLHttpRequest();\n    //     xhr.onload = function() {\n    //         var reader = new FileReader();\n    //         reader.onloadend = function() {\n    //             callback(reader.result);\n    //         }\n    //         reader.readAsDataURL(xhr.response);\n    //     };\n    //     xhr.open('GET', url);\n    //     xhr.responseType = 'blob';\n    //     xhr.send();\n    // }\n    //\n    // toDataURL('https://www.gravatar.com/avatar/d50c83cc0c6523b4d3f6085295c953e0', function(dataUrl) {\n    //     console.log('RESULT:', dataUrl)\n    // })\n\n\n\n\n","import React, {useEffect, useState} from 'react'\nimport './Forms.scss';\n\nimport {getNote, getAllNote, addNote, getNoteByKey, getNotesByCursors, putImg} from \"../../indexedDB/db\";\n\n\nconst Form = ({db}) => {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    let object = {\n        name: name,\n        email: email,\n        pass: password\n    }\n\n    const getInputValue = (e) => {\n        e.preventDefault()\n        console.log(object.name)\n    }\n    const addData = (e) => {\n        e.preventDefault()\n        addNote(object)\n    }\n    const getAllData = (e) => {\n        e.preventDefault()\n        getAllNote()\n    }\n    const getDataOne = (e) => {\n        e.preventDefault()\n        getNote()\n    }\n    const getDataByKey = (e) => {\n        e.preventDefault()\n        // определяет индекс по имени или того path key который указан\n        getNoteByKey(\"Denys\")\n    }\n    const getCursor = (e) => {\n        e.preventDefault()\n        getNotesByCursors()\n    }\n\n    const x = () => {\n        let str = \"base64\"\n        let base64 = btoa(str)\n        let decoder = atob(base64)\n\n        console.log(str)\n        console.log(base64)\n        console.log(decoder)\n    }\n\n\n\n    return (\n        <div className=\"temp_form_container\">\n            <form className=\"temp_form_block\">\n                <img id=\"temp_img\" className=\"temp_img\" src=\"\" alt=\"\"/>\n                <input onChange={putImg} id=\"fileImg\" type=\"file\" multiple='multiple' placeholder=\"file\" name=\"file\"/>\n                <input onChange={(e)=>setName(e.target.value)} type=\"text\" placeholder=\"name\" name=\"name\"/>\n                <input onChange={(e)=>setEmail(e.target.value)} type=\"text\" placeholder=\"email\" name=\"email\"/>\n                <input onChange={(e)=>setPassword(e.target.value)} type=\"text\" placeholder=\"password\" name=\"password\"/>\n                <div className=\"temp_btn_block\">\n                    <button onClick={addData} id=\"temp_btn_add\">ADD</button>\n                    <button onClick={getAllData} id=\"temp_btn_remove\">REMOVE</button>\n                    <button onClick={x} id=\"temp_btn_change\">CHANGE</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default Form;\n","import React, {useEffect, useState} from 'react'\nimport './Items.scss';\nimport {getAllNote, removeItem} from \"../../indexedDB/db\";\n\n\nconst Items = () => {\n\n    const [heroes, setHeroes] = useState([])\n\n    useEffect(()=> {\n            getAllNote()\n                .then(data => setHeroes(data))\n    }, [])\n\n    return (\n        <div className=\"item_container\">\n            {\n                heroes.slice(0,heroes.length-1).map(el=>(\n                    <div className='item_box' key={el.email}>\n                        <p>{el.name}</p>\n                        <p>{el.email}</p>\n                        <button onClick={removeItem} data-name={el.name}>remove</button>\n                    </div>\n                ))\n            }\n\n        </div>\n    )\n}\n\nexport default Items;\n","import {useState, useEffect, Fragment} from 'react'\nimport './App.css';\nimport Form from \"./components/Forms/Form\";\nimport {createDB} from \"./indexedDB/db\";\nimport Items from \"./components/Items/Itams\";\n\n\nfunction App() {\n    const [openDb, setOpenDb] = useState(false)\n\n    useEffect(() => {\n        createDB()\n            .then((data) => {\n                setOpenDb(true)\n            })\n    })\n\n\n    return (\n        <div className=\"App\">\n            {\n                openDb == true ?\n                    <Fragment>\n                        <Form/>\n                        <Items/>\n                    </Fragment>\n                    :\n                    <h5>Waiting...</h5>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}